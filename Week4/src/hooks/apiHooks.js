import {fetchData} from '../utils/fetchData';
import {useCallback, useEffect, useState} from 'react';

const useAuthentication = () => {
  const postLogin = useCallback(async (inputs) => {
    const fetchOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(inputs),
    };
    const loginResult = await fetchData(
      import.meta.env.VITE_AUTH_API + '/auth/login',
      fetchOptions,
    );

    console.log(loginResult);

    return loginResult;
  }, []);
  return {postLogin};
};

const useUser = () => {
  const postUser = async (inputs) => {
    const fetchOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(inputs),
    };
    return await fetchData(
      import.meta.env.VITE_AUTH_API + '/users',
      fetchOptions,
    );
  };

  const getUserByToken = useCallback(async (token) => {
    const fetchOptions = {
      headers: {
        Authorization: 'Bearer: ' + token,
      },
    };
    const userResult = await fetchData(
      import.meta.env.VITE_AUTH_API + '/users/token',
      fetchOptions,
    );
    console.log('userResult', userResult);

    return userResult;
  }, []);

  return {getUserByToken, postUser};
};

const useFile = () => {
  const postFile = async (file, token) => {
    const formData = new FormData();
    formData.append('file', file);

    console.log('formData', formData);

    const fetchOptions = {
      method: 'POST',
      headers: {
        Authorization: 'Bearer: ' + token,
      },
      body: formData,
    };
    const uploadResult = await fetchData(
      import.meta.env.VITE_UPLOAD_SERVER + '/upload',
      fetchOptions,
    );

    return uploadResult;
  };

  return {postFile};
};

const useMedia = (listMedia = true) => {
  const [mediaArray, setMediaArray] = useState([]);

  useEffect(() => {
    if (listMedia) getMedia();
  }, []);

  const getMedia = async () => {
    try {
      const mediaData = await fetchData(
        import.meta.env.VITE_MEDIA_API + '/media',
      );

      // const userIds = mediaData.map(({user_id}) => user_id);

      const authApiUrl = import.meta.env.VITE_AUTH_API;
      const newData = await Promise.all(
        mediaData.map(async (item) => {
          const data = await fetchData(`${authApiUrl}/users/${item.user_id}`);
          return {...item, username: data.username};
        }),
      );
      console.log('usersdata', newData);

      setMediaArray(newData);
    } catch (error) {
      console.error('Error', error);
    }
  };

  // ApiHooks.js
  const postMedia = async (file, inputs, token) => {
    // TODO: create a suitable object for Media API: without media_id, user_id, thumbnail and created_at. All those are generated by the API. See the media API documentation.
    // TODO: post the data to Media API and get the data as MediaResponse
    // TODO: return the data
    console.log('postMedia file', file);
    const data = {
      ...inputs,
      ...file,
    };
    const fetchOptions = {
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        Authorization: 'Bearer: ' + token,
      },
      body: JSON.stringify(data),
    };

    const mediaResult = await fetchData(
      `${import.meta.env.VITE_MEDIA_API}/media`,
      fetchOptions,
    );
  };

  const deleteMedia = async (id, token) => {
    const fetchOptions = {
      method: 'DELETE',
      headers: {
        'content-type': 'application/json',
        Authorization: 'Bearer: ' + token,
      },
    };

    try {
      const mediaResult = await fetchData(
        `${import.meta.env.VITE_MEDIA_API}/media/${id}`,
        fetchOptions,
      );
      return true;
    } catch {
      return false;
    }
  };

  const modifyMedia = async (id, inputs, token) => {
    console.log(inputs, token);
    const fetchOptions = {
      method: 'PUT',
      headers: {
        'content-type': 'application/json',
        Authorization: 'Bearer: ' + token,
      },
      body: JSON.stringify({...inputs}),
    };
    try {
      const mediaResult = await fetchData(
        `${import.meta.env.VITE_MEDIA_API}/media/${id}`,
        fetchOptions,
      );
      return mediaResult;
    } catch {
      return false;
    }
  };

  return {mediaArray, postMedia, deleteMedia, modifyMedia};
};

const useLike = () => {
  const getLikesByMediaId = useCallback(async (id) => {
    const data = await fetchData(
      `${import.meta.env.VITE_MEDIA_API}/likes/bymedia/${id}`,
    );

    return data;
  }, []);

  const postLike = async (media_id, token) => {
    const fetchOptions = {
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        Authorization: 'Bearer: ' + token,
      },
      body: JSON.stringify({media_id}),
    };
    return await fetchData(
      `${import.meta.env.VITE_MEDIA_API}/likes`,
      fetchOptions,
    );
  };

  const deleteLike = async (id, token) => {
    const fetchOptions = {
      method: 'DELETE',
      headers: {
        'content-type': 'application/json',
        Authorization: 'Bearer: ' + token,
      },
    };

    const mediaResult = await fetchData(
      `${import.meta.env.VITE_MEDIA_API}/likes/${id}`,
      fetchOptions,
    );
  };

  return {getLikesByMediaId, postLike, deleteLike};
};

export {useAuthentication, useUser, useFile, useMedia, useLike};
